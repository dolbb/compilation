//Call can come from Statement and from Exp.

void funcVoid() { 
	print("funcVoid\n");
}

void main() {
	
	{funcVoid();}
	print("delimiter1");
	//int a = funcVoid();
	//int a = (funcVoid());
	
	int c;
	//c = funcVoid();
	//c = (funcVoid());
	
	funcVoid();
	print("delimiter2");
	//return funcVoid();
	//return (funcVoid());
	
	//if (funcVoid())       { print("insideIf1\n"); }
	//if (not funcVoid())   { print("insideIf2\n"); }
	//if ((funcVoid()))     { print("insideIf3\n"); }
	//if (not (funcVoid())) { print("insideIf4\n"); }
	
	if (true) funcVoid();
	print("delimiter3");
	if (true) { funcVoid(); }
	print("delimiter4");
	//while (funcVoid())       { print("insideWhile1"); break;}
	//while (not funcVoid())   { print("insideWhile2"); break;}
	//while ((funcVoid()))     { print("insideWhile3"); break;}
	//while (not (funcVoid())) { print("insideWhile4"); break;}
	
	while (true) { funcVoid(); break; }
	print("delimiter5");
	//switch (funcVoid())   { case 2: {print("insideCase2"); } break; };
	//switch ((funcVoid())) { case 2: {print("insideCase2"); } break; };
	
	int u = 2;
	switch (u) { case 2: { funcVoid(); } break; };
	print("delimiter6");
	switch (u) { case 2:   funcVoid();   break; };
	print("delimiter7");
	
	byte ub = 2b;
	switch (ub) { case 2b: { funcVoid(); } break; };
	print("delimiter8");
	switch (ub) { case 2b:   funcVoid();   break; };
	
	//funcHelper1(funcVoid());
	//funcHelper2(funcVoid(),funcVoid());
	
	//Need to check every exp with (funcVoid())
	
	//int bb1 = funcVoid()*funcVoid(); printi(bb1);
	
	//int bb2 = funcVoid()/funcVoid(); printi(bb2);
	
	//int bb3 = funcVoid()+funcVoid(); printi(bb3);
	
	//int bb4 = funcVoid()-funcVoid(); printi(bb4);
	
	//bool bb5 =     not funcVoid();   if (bb5) { print("true1\n"); } else { print("false1\n");}
	//bool aa5 = not (not funcVoid()); if (aa5) { print("true2\n"); } else { print("false\n");}
	
	//bool bb6 = funcVoid() and funcVoid();       if (bb6) { print("true3\n"); } else { print("false3\n");}
	//bool aa6 = not (funcVoid() and funcVoid()); if (aa6) { print("true4\n"); } else { print("false4\n");}
	
	//bool bb7 = funcVoid() or funcVoid();       if (bb7) { print("true5\n"); } else { print("false5\n");}
	//bool aa7 = not (funcVoid() or funcVoid()); if (aa7) { print("true6\n"); } else { print("false6\n");}
	
	//bool bb8 = funcVoid() > funcVoid();       if (bb8) { print("true7\n"); } else { print("false7\n");}
	//bool aa8 = not (funcVoid() > funcVoid()); if (aa8) { print("true8\n"); } else { print("false8\n");}
	
	//bool bb9 = funcVoid() >= funcVoid();       if (bb9) { print("true9\n"); } else { print("false9\n");}
	//bool aa9 = not (funcVoid() >= funcVoid()); if (aa9) { print("true99\n"); } else { print("false99\n");}
		
	//bool bb10 = funcVoid() < funcVoid();        if (bb10) { print("true10\n"); } else { print("false10\n");}
	//bool aa10 = not (funcVoid() < funcVoid());  if (aa10) { print("true11\n"); } else { print("false11\n");}
	
	//bool bb11 = funcVoid() <= funcVoid();       if (bb11) { print("true12\n"); } else { print("false12\n");}
	//bool aa11 = not (funcVoid() <= funcVoid()); if (aa11) { print("true13\n"); } else { print("false13\n");}
	
	//bool bb12 = funcVoid() == funcVoid(); if (bb12) { print("true14\n"); } else { print("false14\n");}
	//bool aa12 = funcVoid() == funcVoid(); if (aa12) { print("true15\n"); } else { print("false15\n");}
}